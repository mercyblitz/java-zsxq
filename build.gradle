/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6.3/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

buildscript {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$managementpluginVersion"
    }
}

group = "mercyblitz"
description = "小马哥 Java 知识星球 - 代码工程"
version = "0.0.1-SNAPSHOT"

repositories {
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    maven { url 'https://oss.sonatype.org/content/repositories/releases/' }
    mavenCentral()
}

subprojects {

    apply plugin: "java"
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "org.springframework.boot"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    [compileJava, compileTestJava]*.options.collect { options -> options.encoding = "UTF-8"
    }

    configurations.configureEach {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    repositories {
        maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven { url 'https://oss.sonatype.org/content/repositories/releases/' }
        mavenCentral()
    }

    dependencyManagement {

        dependencies {
            // Java EE
            dependency "javax.annotation:javax.annotation-api:$annotationApiVersion"
            dependency "com.google.code.findbugs:jsr305:$jsr305Version"

            // Apache Commons
            dependency "org.apache.commons:commons-lang3:$commonsLang3Version"
            dependency "commons-io:commons-io:$commonsIOVersion"

            // Apache Log4j2
            dependency "org.apache.logging.log4j:log4j-api:$log4j2Version"
            dependency "org.apache.logging.log4j:log4j-core:$log4j2Version"
            dependency "org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version"

            // Apollo
            dependency "com.ctrip.framework.apollo:apollo-openapi:$apolloOpenApiVersion"
            dependency "com.ctrip.framework.apollo:apollo-client:$apolloClientVersion"

            // Alibaba
            dependency "com.alibaba:druid-spring-boot-starter:$alibabaDruidVersion"
            dependency "com.alibaba:druid:$alibabaDruidVersion"
            dependency "com.alibaba:fastjson:$fastjsonVersion"

            // MyBatis
            dependency "org.mybatis:mybatis:$mybatisVersion"
            dependency "org.mybatis.spring.boot:mybatis-spring-boot-starter:$mybatisSpringBootVersion"

            // Others
            dependency "org.apache.curator:curator-recipes:$curatorVersion"

            // Testing
            dependency "org.openjdk.jmh:jmh-core:$jmhVersion"
            dependency "org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion"

        }

        imports {
            // Spring Boot
            mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"

            // Spring Cloud
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springcloudVersion"

            // Spring Cloud Alibaba
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:$springcloudalibabaVersion"
        }

        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    tasks.named('jar') {
        manifest {
            attributes('Implementation-Title': project.name,
                    'Implementation-Version': project.version)
        }
    }

    tasks.withType(PublishToMavenRepository).configureEach {
        it.enabled = false
    }

    java {
        withSourcesJar()
    }
}


